#!/usr/bin/python3
#+
# This script does comparisons on two sets of records and displays any differences.
# Invoke it as follows:
#
#     compare_records [--order=order] [--order1=order1] [--order2=order2]
#         [remap...]
#         dbms_params
#         field_names
#         table_spec
#         criteria1
#         criteria2
#
# where the dbms_params are a colon-separated string of items specifying the DBMS name
# and connection parameters.
#
# field_names is a comma-separated list of names of fields whose values are to be compared,
# and table_spec specifies the table(s) from which the fields are to be obtained; this can
# be a simple table name, or a join on multiple tables. A field name of the form * expands to
# all the fields in table_spec (which must be a simple table name in this case), while
# table_name.* expands to all the fields defined for the specified table. A field name beginning
# with - means to exclude that particular name from a prior wildcard expansion.
#
# criteria1 and criteria2 are SQL expressions selecting the two sets of records to be
# compared. The optional remap specifications take the form of
#
#     --remap=field:value1:value2
#
# This means that value1 for field in the first record set is to be taken as equivalent to
# value2 for field in the second record set.
#
# The optional order, order1 and order2 specifications define the respective ordering of the
# records for comparison purposes; order for both sets of records, order1 for the first set,
# order2 for the second set. If omitted, then the fieldname list is used.
#
# Copyright 2009, 2015 by Lawrence Dâ€™Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY-SA <http://creativecommons.org/licenses/by-sa/4.0/>.
#-

import sys
import getopt
from sql_useful import \
    parse_dbms_params

#+
# Mainline
#-

opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["order=", "order1=", "order2=", "remap="]
  )
if len(args) != 5 :
    raise getopt.GetoptError \
      (
        "need dbms_params, field_names, table_spec, criteria1 and criteria2 args"
      )
#end if
dbms_parms, arg_field_names, table_spec, criteria1, criteria2 = args
remap = {}
order = None
order1 = None
order2 = None
for keyword, value in opts :
    if keyword == "--order" :
        order = value
    elif keyword == "--order1" :
        order1 = value
    elif keyword == "--order2" :
        order2 = value
    elif keyword == "--remap" :
        remap_field, remap_value1, remap_value2 = value.split(":", 2)
        if remap_field not in remap :
            remap[remap_field] = {}
        #end if
        remap[remap_field][remap_value1] = remap_value2
    #end if
#end for
conn = parse_dbms_params(dbms_parms, "for table")
field_names = []
for entry in arg_field_names.split(",") :
    if entry == "*" :
        field_names.extend(col["name"] for col in conn.iter_columns(table_spec))
    elif entry.endswith(".*") :
        table_name = entry[:-2]
        field_names.extend(table_name + "." + col["name"] for col in conn.iter_columns(table_spec))
    elif entry.startswith("-") :
        field_names = list \
          (
            f for f in field_names if f != entry[1:]
          )
    else :
        field_names.append(entry)
    #end if
#end for
if order1 == None :
    order1 = order
#end if
if order2 == None :
    order2 = order
#end if
if order1 == None :
    order1 = ", ".join(field_names)
#end if
if order2 == None :
    order2 = ", ".join(field_names)
#end if

iter1 = conn.iter \
  (
    cmd =
            "select %(fieldnames)s from %(tablespec)s where %(criteria)s order by %(order)s"
        %
            {
                "fieldnames" : ", ".join(field_names),
                "tablespec" : table_spec,
                "criteria" : criteria1,
                "order" : order1,
            },
    mapfn = lambda r : tuple(str(f) for f in r)
  )
iter2 = conn.iter \
  (
    cmd =
            "select %(fieldnames)s from %(tablespec)s where %(criteria)s order by %(order)s"
        %
            {
                "fieldnames" : ", ".join(field_names),
                "tablespec" : table_spec,
                "criteria" : criteria2,
                "order" : order2,
            },
    mapfn = lambda r : tuple(str(f) for f in r)
  )
count1 = 0
count2 = 0
count_diff = 0
while True :
    if iter1 != None :
        record1 = next(iter1, None)
        if record1 == None :
            iter1 = None
        #end if
    #end if
    if iter2 != None :
        record2 = next(iter2, None)
        if record2 == None :
            iter2 = None
        #end if
    #end if
    if record1 != None :
        # apply remap
        for field_index, field_name in enumerate(field_names) :
            mapping = remap.get(field_name)
            if mapping != None :
                new_value = mapping.get(record1[field_index])
                if new_value != None :
                    record1 = record1[:field_index] + (new_value,) + record1[field_index + 1:]
                #end if
            #end if
        #end for
    #end if
    if record1 != None :
        count1 += 1
    #end if
    if record2 != None :
        count2 += 1
    #end if
    if (record1 != None or record2 != None) and record1 != record2 :
        sys.stdout.write("Mismatch: %s vs %s\n" % (repr(record1), repr(record2)))
        count_diff += 1
    #end if
    if iter1 == None and iter2 == None :
        break
#end while
sys.stdout.write("Records examined: %d vs %d, diffs found %d\n" % (count1, count2, count_diff))

conn.close()
