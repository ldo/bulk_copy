#!/usr/bin/python3
#+
# This script does text conversion on values of a specified field in a table of
# a MySQL database. Invoke this script as follows:
#
#     convert_field [--user=username] [--password=password]
#          [--host=host] [--port=port] [--database=database] [--convert]
#         table_name id_field_names field_name src_encoding dst_encoding
#
# where the username, password, host, port and database are used as MySQL connection parameters.
# If --password is specified but an empty value is given, then the user will be prompted for
# the password without echoing.
#
# table_name is the name of the table, id_field_names is the name of a unique-valued field
# (or comma-separated list of fields with a unique-valued combination of values) identifying
# each record for update purposes, and field_name is the name of the field in that table
# to check. The values are assumed to be in encoding src_encoding, and they will be converted
# to encoding dst_encoding. If --convert is specified, then the field values will be updated;
# otherwise the script will only report which field values need changing.
#
# Copyright 2009, 2015 by Lawrence D’Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY-SA <http://creativecommons.org/licenses/by-sa/4.0/>.
#-

import sys
import mysql.connector
import getopt
import getpass

#+
# Useful MySQL stuff
#-

def sql_iter(conn, cmd, values = None, mapfn = lambda x : x) :
    """generator which executes cmd with values in a new cursor on conn,
    yielding the rows one at a time, optionally mapped through function mapfn."""
    cursor = conn.cursor()
    cursor.execute(cmd, values)
    while True :
        yield mapfn(next(cursor))
    #end while
#end sql_iter

def sql_string(s) :
    """returns a MySQL string literal which evaluates to s. Needed
    for those times when the client API's automatic quoting isn't good enough."""
    result = []
    for ch in str(s) :
        if ch == "\0" :
            ch = "\\0"
        elif ch == "\010" :
            ch = "\\b"
        elif ch == "\011" :
            ch = "\\t"
        elif ch == "\012" :
            ch = "\\n"
        elif ch == "\015" :
            ch = "\\r"
        elif ch == "\032" :
            ch = "\\z"
        elif ch == "'" or ch == "\"" or ch == "\\" :
            ch = "\\" + ch
        #end if
        result.append(ch)
    #end for
    return "\"" + "".join(result) + "\""
#end sql_string

def sql_byte_string(val) :
    return \
        "X'" + "".join("%02X" % i for i in val) + "'"
#end sql_byte_string

#+
# Mainline
#-

(opts, args) = getopt.getopt \
  (
    sys.argv[1:],
    "",
    [
        "database=",
        "host=",
        "password=",
        "port=",
        "user=",
        "convert",
    ]
  )
if len(args) != 5 :
    raise getopt.GetoptError \
      (
        "need table_name, field_name, src_encoding and dst_encoding args"
      )
#end if
(table_name, id_field_names, field_name, src_encoding, dst_encoding) = args
id_field_names = tuple(id_field_names.split(","))
conn_params = {"buffered" : True} # needed to avoid “unread result found” errors
do_convert = False
for keyword, value in opts :
    if keyword == "--database" :
        conn_params["db"] = value
    elif keyword == "--host" :
        conn_params["host"] = value
    elif keyword == "--port" :
        conn_params["port"] = int(value)
    elif keyword == "--user" :
        conn_params["user"] = value
    elif keyword == "--password" :
        conn_params["passwd"] = value
    elif keyword == "--convert" :
        do_convert = True
    #end if
#end for
if conn_params.get("passwd") == "" :
    conn_params["passwd"] = getpass.getpass()
#end if
conn = mysql.connector.connect(**conn_params)
conn.set_unicode(False)

update_cursor = None
nr_checked = 0
nr_changed = 0
for \
    in_fields \
in \
    sql_iter \
      (
        conn = conn,
        cmd =
                "select %(fields)s from %(table)s"
            %
                {
                    "fields" : ", ".join((field_name,) + id_field_names),
                    "table" : table_name,
                }
      ) \
:
    nr_checked += 1
    in_value = in_fields[0]
    if in_value != None :
        out_value = in_value.decode(src_encoding).encode(dst_encoding)
    else :
        out_value = None
    #end if
    if out_value != in_value :
        nr_changed += 1
        sys.stdout.write \
          (
                "(%(identify)s): %(old)s => %(new)s\n"
            %
                {
                    "identify" : ", ".join
                          (
                                "%(field)s = %(value)s"
                            %
                                {
                                    "field" : id_field_names[i],
                                    "value" : sql_string(in_fields[i + 1]),
                                }
                            for i in range(0, len(id_field_names))
                          ),
                    "old" : sql_string(in_value),
                    "new" : sql_byte_string(out_value),
                }
          )
        if do_convert :
            if update_cursor == None :
                update_cursor = conn.cursor()
            #end if
            update_cursor.execute \
              (
                    "update %(table)s set %(field)s = %(value)s where %(identify)s"
                %
                    {
                        "table" : table_name,
                        "field" : field_name,
                        "value" : sql_byte_string(out_value),
                        "identify" : " and ".join
                          (
                                "%(field)s = %(value)s"
                            %
                                {
                                    "field" : id_field_names[i],
                                    "value" : sql_string(in_fields[i + 1]),
                                }
                            for i in range(0, len(id_field_names))
                          ),
                    }
              )
        #end if
    #end if
#end for
if update_cursor != None :
    update_cursor.close()
#end if
conn.close()
sys.stdout.write("Changed/Checked = %d/%d\n" % (nr_changed, nr_checked))
