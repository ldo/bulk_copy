#!/usr/bin/python3
#+
# This script does text conversion on values of a specified field in a database table.
# Invoke this script as follows:
#
#     convert_field [--convert] dbms_params
#         table_name id_field_names field_name src_encoding dst_encoding
#
# where the dbms_params are a colon-separated string of items specifying the DBMS name
# and connection parameters.
#
# table_name is the name of the table, id_field_names is the name of a unique-valued field
# (or comma-separated list of fields with a unique-valued combination of values) identifying
# each record for update purposes, and field_name is the name of the field in that table
# to check. The values are assumed to be in encoding src_encoding, and they will be converted
# to encoding dst_encoding. If --convert is specified, then the field values will be updated;
# otherwise the script will only report which field values need changing.
#
# Copyright 2009, 2015 by Lawrence Dâ€™Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY-SA <http://creativecommons.org/licenses/by-sa/4.0/>.
#-

import sys
import getopt
from sql_useful import \
    parse_dbms_params

#+
# Mainline
#-

(opts, args) = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["convert"]
  )
if len(args) != 6 :
    raise getopt.GetoptError \
      (
        "need dbms_params, table_name, id_field_names, field_name, src_encoding and dst_encoding args"
      )
#end if
dbms_parms, table_name, id_field_names, field_name, src_encoding, dst_encoding = args
id_field_names = tuple(id_field_names.split(","))
do_convert = False
for keyword, value in opts :
    if keyword == "--convert" :
        do_convert = True
    #end if
#end for
conn = parse_dbms_params(dbms_parms, "for table")

update_cursor = None
nr_checked = 0
nr_changed = 0
for \
    in_fields \
in \
    conn.iter \
      (
        cmd =
                "select %(fields)s from %(table)s"
            %
                {
                    "fields" : ", ".join
                      (
                            ("cast(%s as %s)" % (field_name, conn.blob_type),)
                        +
                            id_field_names
                      ),
                    "table" : table_name,
                }
      ) \
:
    nr_checked += 1
    in_value = in_fields[0]
    if in_value != None :
        out_value = in_value.decode(src_encoding).encode(dst_encoding)
    else :
        out_value = None
    #end if
    if out_value != in_value :
        nr_changed += 1
        sys.stdout.write \
          (
                "(%(identify)s): %(old)s => %(new)s\n"
            %
                {
                    "identify" : ", ".join
                          (
                                "%(field)s = %(value)s"
                            %
                                {
                                    "field" : id_field_names[i],
                                    "value" : conn.string(in_fields[i + 1]),
                                }
                            for i in range(0, len(id_field_names))
                          ),
                    "old" : conn.string(in_value),
                    "new" : conn.string(out_value),
                }
          )
        if do_convert :
            if update_cursor == None :
                update_cursor = conn.cursor()
            #end if
            update_cursor.execute \
              (
                    "update %(table)s set %(field)s = %(value)s where %(identify)s"
                %
                    {
                        "table" : table_name,
                        "field" : field_name,
                        "value" : conn.string(out_value),
                        "identify" : " and ".join
                          (
                                "%(field)s = %(value)s"
                            %
                                {
                                    "field" : id_field_names[i],
                                    "value" : conn.string(in_fields[i + 1]),
                                }
                            for i in range(0, len(id_field_names))
                          ),
                    }
              )
        #end if
    #end if
#end for
if update_cursor != None :
    update_cursor.close()
#end if
conn.close()
sys.stdout.write("Changed/Checked = %d/%d\n" % (nr_changed, nr_checked))
