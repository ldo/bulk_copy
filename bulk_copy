#!/usr/bin/python3
#+
# This script copies a bunch of database records according to specified criteria.
# Source and destination may be in the same database, or different databases, even
# different DBMSes (both MySQL and SQLite currently supported).
#
# Invoke this script as follows:
#
#     bulk_copy \
#         src_table_name:src_dbms_params \
#         field_names \
#         condition \
#         dst_table_name[:dst_dbms_params] \
#         [replace_field_value ...]
#
# The arguments are interpreted as follows:
#
#     src_table_name:src_dbms_params
#          -- the name of the table to select records from, followed by a colon and
#             connection parameters for the source DBMS.
#     field_names
#          -- comma-separated list of fields to extract, or “*” for all fields.
#     condition
#          -- if this is not the empty string, it is substituted as is in an SQL
#             where-clause to select the records. If it is the empty string, then
#             all records are selected.
#     dst_table_name[:dst_dbms_params]
#          -- the name of the table into which to insert the records, optionally followed
#             by a colon and connection parameters for the destination DBMS. If the connection
#             parameters are omitted, then the same DBMS connection is used as for the source
#             table.
#     replace_field_value
#          -- optional additional field specifications in the form “name=value”
#             to define for the newly-inserted records.
#
# The dbms_params take the form
#
#     dbms_name[:param=value[:param=value...]]
#
# where dbms_name is the name of the DBMS, currently either “mysql” or “sqlite”, and
# the additional param/value pairs depend on the DBMS:
#
#     * For MySQL, valid params are “user”, “password”, “host”, “port” and “database”,
#       all of which are optional. As a special case, if “password” is specified but
#       its value is the empty string, then the user will be prompted to enter the
#       password without echoing.
#     * For SQLite, valid params are “filename” (the name of the database file to
#       open--required) and “write” (whether to open the database for write
#       access--optional, defaults to yes).
#
# Examples:
#
#     bulk_copy jobs:mysql:user=fred:database=billing description,rate client_id=4 jobs client_id=8
#
# will find all entries in the “jobs” table in the “billing” database where client_id = 4
# and insert new copies with the same “description” and “rate” fields, but with client_id
# set to 8. The database is accessed as the user “fred”, with no password.
#
#     bulk_copy \
#         streets:mysql:database=postcodes:user=fred:password=: '*' "postcode like '32%'" \
#         streets:sqlite:filename=postcodes.db
#
# will copy all fields of all records in the “streets” table where the postcode begins with “32”
# from a MySQL database called “postcodes” into the table with the same name in an SQLite
# database named “postcodes.db”.
#
# Copyright 2009, 2015 by Lawrence D’Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY-SA <http://creativecommons.org/licenses/by-sa/4.0/>.
#-

import sys
import re
import getopt
from sql_useful import \
    parse_dbms_params, \
    BulkInserter

#+
# Mainline
#-

def mainline() :
    args = sys.argv[1:]
    if len(args) < 4 :
        raise getopt.GetoptError \
          (
            "need at least src_table_name, fields, condition and dst_table_name args"
          )
    #end if
    src_table_name = args[0]
    field_names = args[1].split(",")
    condition = args[2]
    dst_table_name = args[3]

    doing_dst_table = False
    while True :
        items = (src_table_name, dst_table_name)[doing_dst_table].split(":", 1)
        if doing_dst_table :
            dst_table_name = items[0]
        else :
            src_table_name = items[0]
        #end if
        if len(items) < 2 and not doing_dst_table :
            raise getopt.GetoptError \
              (
                "need to specify DBMS on src_table_name"
              )
        #end if
        if len(items) > 1 :
            conn = parse_dbms_params(items[1], "%s table" % ("src", "dst")[doing_dst_table])
            if doing_dst_table :
                dst_conn = conn
            else :
                src_conn = conn
            #end if
        else :
            dst_conn = src_conn
        #end if
        if doing_dst_table :
            break
        doing_dst_table = True
    #end while

    replace_field_names = []
    replace_field_values = []
    for field in args[4:] :
        field_name, value = field.split("=", 1)
        if field_name in field_names :
            raise getopt.GetoptError("can't both copy and replace field %s" % field_name)
        #end if
        replace_field_names.append(field_name)
        replace_field_values.append(value)
    #end for
    if len(field_names) == 1 and field_names[0] == "*" :
        field_names = list \
          (
                set(col["name"] for col in src_conn.iter_columns(src_table_name))
            -
                set(replace_field_names)
          )
    #end if
    all_field_names = field_names + replace_field_names

    nr_records = 0
    insert = BulkInserter(dst_conn, dst_table_name, all_field_names, ignore_duplicates = False)
    for \
            entry \
        in \
            src_conn.iter \
              (
                cmd =
                        "select %(fields)s from %(table)s%(condition)s"
                    %
                        {
                            "fields" : ", ".join(field_names),
                            "table" : src_table_name,
                            "condition" : ("", " where " + condition)[condition != ""],
                        }
              ) \
    :
        insert.add_record(list(entry) + replace_field_values)
        nr_records += 1
    #end for
    insert.done_insert()
    sys.stderr.write("records inserted: %s\n" % nr_records)

    if dst_conn != src_conn :
        dst_conn.close()
    #end if
    src_conn.close()
#end mainline

if __name__ == "__main__" :
    mainline()
#end if
