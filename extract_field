#!/usr/bin/python3
#+
# This script extracts the value of a specified field into a file.
# It is useful for binary-valued fields, which the usual DBMS command-line
# tools often have trouble with. Invoke it as follows:
#
#     extract_field [--existing=error|overwrite|skip] database_spec table_name field_name output_name [condition]
#
# where database_spec specifies the database to operate on, field_name
# is the name of the field to extract, output_name is the output filename
# (which can be a formatting template if extracting the field value for
# multiple records) and condition is the optional condition for selecting
# the records (defaults to all).
#
# Copyright 2015 by Lawrence D’Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY-SA <http://creativecommons.org/licenses/by-sa/4.0/>.
#-

import sys
import enum
import os
import getopt
from sql_useful import \
    parse_dbms_params

@enum.unique
class EXISTING_ACTION(enum.Enum) :
    ERROR = "error"
    SKIP = "skip"
    OVERWRITE = "overwrite"
#end EXISTING_ACTION

#+
# Mainline
#-

existing = EXISTING_ACTION.ERROR
opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["existing="]
  )
if len(args) < 4 or len(args) > 5 :
    raise getopt.GetoptError \
      (
        "usage: %s database_spec table_name field_name output_name [condition]" % sys.argv[0]
      )
#end if
for keyword, value in opts :
    if keyword == "--existing" :
        existing = tuple(i for i in EXISTING_ACTION if i.value == value)[0]
    #end if
#end for
table_name = args[1]
field_name = args[2]
output_name = args[3]
if len(args) > 4 :
    condition = args[4]
else :
    condition = None
#end if
conn = parse_dbms_params(args[0], "for extract_field")
id_field_names = []
fmt_pos = -1
while True :
    fmt_pos += 1
    if fmt_pos == len(output_name) :
        break
    pos = output_name[fmt_pos:].find("%")
    if pos < 0 :
        break
    pos += fmt_pos
    if output_name[pos + 1] == "%" :
        pos += 1
    else :
        if output_name[pos + 1] != "(" :
            raise getopt.GetoptError("format items must have names in “(”..“)” : %s" % output_name[pos:])
        #end if
        id_field = output_name[pos + 2 : output_name[pos + 2:].index(")") + pos + 2]
        id_field_names.append(id_field)
    #end if
    fmt_pos = pos
#end while
nr_records = 0
nr_written = 0
field_list = tuple(set(id_field_names) | set((field_name,)))
for \
    record \
in \
    conn.iter \
      (
        cmd =
                "select %(fields)s from %(table)s%(cond)s"
            %
                {
                    "fields" : ", ".join(field_list),
                    "table" : table_name,
                    "cond" : (lambda : "", lambda : " where %s" % condition)[condition != None](),
                }
      ) \
:
    nr_records += 1
    fields = dict(zip(field_list, record))
    if fields[field_name] != None :
        id_fields = dict((k, fields[k]) for k in id_field_names)
        nr_written += 1
        outfile_name = output_name % dict((k, fields[k] if fields[k] != None else "") for k in fields)
        if os.path.exists(outfile_name) and existing != EXISTING_ACTION.OVERWRITE :
            if existing == EXISTING_ACTION.ERROR :
                raise FileExistsError("output %s for %s already exists" % (outfile_name, repr(id_fields)))
            else :
                sys.stderr.write("skip existing %s for %s\n" % (outfile_name, repr(id_fields)))
            #end if
        else :
            outfile = open(outfile_name, "wb")
            outfile.write(fields[field_name])
            outfile.close()
            sys.stderr.write("Wrote %s => %s\n" % (repr(id_fields), outfile_name))
        #end if
    else :
        sys.stderr.write("Null field %s for %s\n" % (field_name, repr(id_fields)))
    #end if
#end for
sys.stderr.write("Records found: %d/%d\n" % (nr_written, nr_records))
